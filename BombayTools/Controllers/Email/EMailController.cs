using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DBView = BombayToolBusinessLayer.Email;
using BO = BombayToolsEntities.BusinessEntities;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Gmail.v1;
using Google.Apis.Gmail.v1.Data;
using Google.Apis.Services;
using Google.Apis.Util.Store;
using System.IO;
using System.Threading;
using System.Web.Hosting;
using Newtonsoft.Json;
using System.Text;
using System.Text.RegularExpressions;
using MDBL = BombayToolBusinessLayer.Master;
using EM = BombayToolBusinessLayer.Email;
using System.Data;
using System.Net.Mail;
using System.Net;
using BombayTools.Filters;
using System.Web.UI.WebControls;
using System.Web.UI;
using HC = BombayToolsDBConnector.Helper;


namespace BombayTools.Controllers.Email
{
    [UserAuthenticationFilter]
    public class EMailController : Controller
    {
        static string[] Scopes = { GmailService.Scope.GmailReadonly };
        DBView.GmailAPI dashboardBussinesManager = new DBView.GmailAPI();

        // GET: EMail

        public string SendAutoEmailTodaysMaintenanceExcel()
        {
            try
            {
                DataTable CompanyMaster = new DataTable();
                HC.DBOperationsForBombayTools db = new HC.DBOperationsForBombayTools();
                string ExcelPath = "";
                string GetmailsentList = "";
                string TodayDate = Convert.ToDateTime(DateTime.Now).ToString("dd-MMM-yyyy HH:mm").Replace('-', '_');
                //string TodayDate = DateTime.Now.ToString().Replace('-', '_');
                TodayDate = TodayDate.Substring(0, 11);
                TodayDate = "TodaysMaintenaceReport_" + TodayDate;
                // dt = db.sub_GetDatatable("USP_GetContainerSurveyRemarks '" + containerNo + "'");
                //CompanyMaster = db.sub_GetDatatable("USP_COMPANYDETAILS");
                //var CompanyName = Convert.ToString(CompanyMaster.Rows[0]["con_Name"]);
                //var CompanyAddress = Convert.ToString(CompanyMaster.Rows[0]["AddressI"]);
                DataTable dt = db.sub_GetDatatable("USP_GetTodaysMaintenanceSummary ");
                //DataTable dt = (DataTable)Session["VoucherDetails"];
                //DataTable dt = (DataTable)ViewData["VoucherDetails"];
                //string Tittle = "From " + Session["fromdate"] + " To " + Session["todate"] + ".";
                //string Tittle = "Report of Last 24hrs";
                GridView gridview = new GridView();
                gridview.DataSource = dt;
                gridview.DataBind();

                Response.Clear();
                Response.Buffer = true;
                Response.Charset = "";
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.AddHeader("content-disposition", "attachment;filename=TodaysMaintenaceReport_" + TodayDate + ".xls");
                using (StringWriter sw = new StringWriter())
                {
                    using (HtmlTextWriter htw = new HtmlTextWriter(sw))
                    {
                        // render the GridView to the HtmlTextWriter
                        //htw.Write("<table><tr><td  style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 26px'>" + CompanyName + " <strong></td></tr>");
                        //htw.Write("<table><tr><td  style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'>" + CompanyAddress + " <strong></td></tr>");
                        htw.Write("<table><tr><td  style='font-weight: bold; text-align: center'; colspan ='10'><strong style='font-size: 15px'> Todays Maintenance Report <strong></td></tr>");
                        //htw.Write("<table><tr><td  style='font-weight: bold; text-align: center'; colspan ='7'><strong style='font-size: 15px'>" + Tittle + " <strong></td></tr>");
                        //htw.Write("<table><tr><td colspan='7'><h6 style='text-align:left'> *output generated by tracker </h6></td></tr>");
                        gridview.RenderControl(htw);
                        // Output the GridView content saved into StringWriter
                        //Response.Output.Write(sw.ToString());

                        string root1 = Server.MapPath("~/Uploads/TodaysMaintenance");
                        //string root = "F:/TrackerAmeya/TrackerAmeya/VoucherReport/" + SearchText + "/";

                        if (!Directory.Exists(root1))
                        {
                            Directory.CreateDirectory(root1);
                        }
                        if (System.IO.File.Exists(Server.MapPath("~/Uploads/TodaysMaintenance/" + TodayDate + ".xls")))
                        {
                            System.IO.File.Delete(Server.MapPath("~/Uploads/TodaysMaintenance/" + TodayDate + ".xls"));
                        }
                        System.IO.File.WriteAllText(Server.MapPath("~/Uploads/TodaysMaintenance/" + TodayDate + ".xls"), sw.ToString());
                        //System.IO.File.WriteAllText(Server.MapPath("~/Uploads/VoucherReport.xls"), sw.ToString());
                        ExcelPath = Server.MapPath("~/Uploads/TodaysMaintenance/" + TodayDate + ".xls");
                        Response.Flush();
                        Response.End();
                    }
                }

                if (ExcelPath != "")
                {
                    //GetmailsentList = LP.AutoEmailTodaysMaintenanceExcel(ExcelPath, TodayDate, dt);

                }

                return GetmailsentList;
            }
            catch (Exception ex)
            {
                return ex.Message.ToString();
                //throw ex;
            }


            //return View();
        }





















        public ActionResult EmailTest()
        {
            UserCredential credential;
            var cleantSecretPath = HostingEnvironment.MapPath("~/Uploads/credentials.json");
            var rootPath = HostingEnvironment.MapPath("~/");

            if (rootPath != null)
            {
                var credentialPath = Path.Combine(rootPath, "Credentials");
                var directoryInfo = Directory.CreateDirectory(credentialPath);
            }

            using (var stream =
                new FileStream(cleantSecretPath, FileMode.Open, FileAccess.Read))
            {
                // The file token.json stores the user's access and refresh tokens, and is created
                // automatically when the authorization flow completes for the first time.

                string credPath = HostingEnvironment.MapPath("~/Uploads/token.json");
                credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                    GoogleClientSecrets.Load(stream).Secrets,
                    Scopes,
                    "user",
                    CancellationToken.None,
                    new FileDataStore(credPath, true)).Result;
                ViewBag.Result1 = ("Credential file saved to: " + credPath);
            }
            var service = new GmailService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                //ApplicationName = ApplicationName,
            });
            string filter = DateTime.Now.AddDays(-3).ToString("yyyy/MM/dd");
            filter = "after:" + filter;
            string query = filter.Replace('-', '/');
            List<Message> result = new List<Message>();
            UsersResource.MessagesResource.ListRequest request = service.Users.Messages.List("me");
            request.Q = query;

            do
            {
                try
                {
                    ListMessagesResponse response = request.Execute();
                    result.AddRange(response.Messages);
                    request.PageToken = response.NextPageToken;
                }
                catch (Exception e)
                {
                    throw e;
                }
            } while (!String.IsNullOrEmpty(request.PageToken));



            List<BO.Recieved_Emails> emails = new List<BO.Recieved_Emails>();



            List<Message> list = new List<Message>();
            foreach (Message email in result)
            {
                var emailInfoReq = service.Users.Messages.Get("me", email.Id);
                var emailInfoResponse = emailInfoReq.Execute();

                if (emailInfoResponse != null)
                {
                    string from = "";
                    string date = "";
                    string subject = "";
                    string body = "";
                    var id = emailInfoResponse.Id;
                    var ThreadID = emailInfoResponse.ThreadId;

                    //loop through the headers and get the fields we need...
                    foreach (var mParts in emailInfoResponse.Payload.Headers)
                    {
                        if (mParts.Name == "Date")
                        {
                            date = mParts.Value;
                            int index = date.IndexOf("+");
                            if (index > 0)
                                date = date.Substring(0, index);
                            int index1 = date.IndexOf("-");
                            if (index1 > 0)
                                date = date.Substring(0, index1);
                        }
                        else if (mParts.Name == "From")
                        {
                            from = mParts.Value;
                            int index = from.IndexOf("<");
                            if (index > 0)
                                from = from.Substring(0, index);
                        }
                        else if (mParts.Name == "Subject")
                        {
                            subject = mParts.Value;
                        }
                    }


                    BO.Recieved_Emails eachData = new BO.Recieved_Emails();
                    eachData.Display = date;
                    eachData.FromName = from;
                    eachData.Subject = subject;
                    eachData.Body = body;
                    eachData.ID = id;
                    eachData.ThreadID = ThreadID;
                    emails.Add(eachData);
                }



            }
            List<BO.QuotationMaster> QuotList = dashboardBussinesManager.GetQuotationList();
            ViewBag.QuotList = JsonConvert.SerializeObject(QuotList);
            return View(emails.ToList());
        }

        public static byte[] FromBase64ForUrlString(string base64ForUrlInput)
        {
            int padChars = (base64ForUrlInput.Length % 4) == 0 ? 0 : (4 - (base64ForUrlInput.Length % 4));
            StringBuilder result = new StringBuilder(base64ForUrlInput, base64ForUrlInput.Length + padChars);
            result.Append(String.Empty.PadRight(padChars, '='));
            result.Replace('-', '+');
            result.Replace('_', '/');
            return Convert.FromBase64String(result.ToString());
        }

        static String DecodeBase64String(string s)
        {
            var ts = s.Replace("-", "+");
            ts = ts.Replace("_", "/");
            var bc = Convert.FromBase64String(ts);
            var tts = Encoding.UTF8.GetString(bc);

            return tts;
        }

        static String GetNestedBodyParts(IList<MessagePart> part, string curr)
        {
            string str = curr;
            if (part == null)
            {
                return str;
            }
            else
            {
                foreach (var parts in part)
                {
                    if (parts.Parts == null)
                    {
                        if (parts.Body != null && parts.Body.Data != null)
                        {
                            var ts = DecodeBase64String(parts.Body.Data);
                            str += ts;
                        }
                    }
                    else
                    {
                        return GetNestedBodyParts(parts.Parts, str);
                    }
                }

                return str;
            }
        }


        [HttpPost]
        public ActionResult GetEMailBody(string ID)
        {
            UserCredential credential;
            var cleantSecretPath = HostingEnvironment.MapPath("~/Uploads/credentials.json");
            var rootPath = HostingEnvironment.MapPath("~/");

            if (rootPath != null)
            {
                var credentialPath = Path.Combine(rootPath, "Credentials");
                var directoryInfo = Directory.CreateDirectory(credentialPath);
            }
            BO.Recieved_Emails eachData = new BO.Recieved_Emails();

            using (var stream =
                new FileStream(cleantSecretPath, FileMode.Open, FileAccess.Read))
            {
                // The file token.json stores the user's access and refresh tokens, and is created
                // automatically when the authorization flow completes for the first time.
                string credPath = HostingEnvironment.MapPath("~/Uploads/token.json");
                credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                    GoogleClientSecrets.Load(stream).Secrets,
                    Scopes,
                    "user",
                    CancellationToken.None,
                    new FileDataStore(credPath, true)).Result;
                ViewBag.Result1 = ("Credential file saved to: " + credPath);
            }
            var service = new GmailService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                //ApplicationName = ApplicationName,
            });

            //var emailInfoReq = service.Users.Threads.Get("me", ID);
            var emailInfoReq = service.Users.Messages.Get("me", ID);
            var emailInfoResponse = emailInfoReq.Execute();

            if (emailInfoResponse != null)
            {
                string from = "";
                string date = "";
                string subject = "";
                string body = "";
                var id = emailInfoResponse.Id;

                //loop through the headers and get the fields we need...
                foreach (var mParts in emailInfoResponse.Payload.Headers)
                {
                    if (mParts.Name == "Date")
                    {
                        date = mParts.Value;
                    }
                    else if (mParts.Name == "From")
                    {
                        from = mParts.Value;
                    }
                    else if (mParts.Name == "Subject")
                    {
                        subject = mParts.Value;
                    }

                    if (date != "" && from != "")
                    {
                        if (emailInfoResponse.Payload.Parts == null && emailInfoResponse.Payload.Body != null)
                            body = DecodeBase64String(emailInfoResponse.Payload.Body.Data);
                        else
                            body = GetNestedBodyParts(emailInfoResponse.Payload.Parts, "");

                        //now you have the data you want....

                    }
                }
                int index = body.IndexOf("<!DOCTYPE");
                if(index > 0)
                {
                    body = body.Remove(0, index);
                }
                if(index < 0)
                {
                    int index1 = body.IndexOf("<html");
                    if (index1 > 0)
                    {
                        body = body.Remove(0, index1);
                    }
                    else
                    {
                        int index2 = body.IndexOf("<div");
                        if (index2 > 0)
                        {
                            body = body.Remove(0, index2);
                        }
                    }
                    
                }
                eachData.Display = date;
                eachData.FromName = from;
                eachData.Subject = subject;
                eachData.Body = body;
                //eachData.PlainText = StripHTML(body);
                eachData.ID = id;
            }

            return Json(eachData);
        }


        private string StripHTML(string source)
        {
            try
            {
                string result;

                // Remove HTML Development formatting
                // Replace line breaks with space
                // because browsers inserts space
                result = source.Replace("\r", " ");
                // Replace line breaks with space
                // because browsers inserts space
                result = result.Replace("\n", " ");
                // Remove step-formatting
                result = result.Replace("\t", string.Empty);
                // Remove repeating spaces because browsers ignore them
                result = System.Text.RegularExpressions.Regex.Replace(result,
                                                                      @"( )+", " ");

                // Remove the header (prepare first by clearing attributes)
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"<( )*head([^>])*>", "<head>",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"(<( )*(/)( )*head( )*>)", "</head>",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         "(<head>).*(</head>)", string.Empty,
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // remove all scripts (prepare first by clearing attributes)
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"<( )*script([^>])*>", "<script>",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"(<( )*(/)( )*script( )*>)", "</script>",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                //result = System.Text.RegularExpressions.Regex.Replace(result,
                //         @"(<script>)([^(<script>\.</script>)])*(</script>)",
                //         string.Empty,
                //         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"(<script>).*(</script>)", string.Empty,
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // remove all styles (prepare first by clearing attributes)
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"<( )*style([^>])*>", "<style>",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"(<( )*(/)( )*style( )*>)", "</style>",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         "(<style>).*(</style>)", string.Empty,
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // insert tabs in spaces of <td> tags
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"<( )*td([^>])*>", "\t",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // insert line breaks in places of <BR> and <LI> tags
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"<( )*br( )*>", "\r",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"<( )*li( )*>", "\r",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // insert line paragraphs (double line breaks) in place
                // if <P>, <DIV> and <TR> tags
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"<( )*div([^>])*>", "\r\r",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"<( )*tr([^>])*>", "\r\r",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"<( )*p([^>])*>", "\r\r",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // Remove remaining tags like <a>, links, images,
                // comments etc - anything that's enclosed inside < >
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"<[^>]*>", string.Empty,
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // replace special characters:
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @" ", " ",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"&bull;", " * ",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"&lsaquo;", "<",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"&rsaquo;", ">",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"&trade;", "(tm)",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"&frasl;", "/",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"&lt;", "<",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"&gt;", ">",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"&copy;", "(c)",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"&reg;", "(r)",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                // Remove all others. More can be added, see
                // http://hotwired.lycos.com/webmonkey/reference/special_characters/
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         @"&(.{2,6});", string.Empty,
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // for testing
                //System.Text.RegularExpressions.Regex.Replace(result,
                //       this.txtRegex.Text,string.Empty,
                //       System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                // make line breaking consistent
                result = result.Replace("\n", "\r");

                // Remove extra line breaks and tabs:
                // replace over 2 breaks with 2 and over 4 tabs with 4.
                // Prepare first to remove any whitespaces in between
                // the escaped characters and remove redundant tabs in between line breaks
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         "(\r)( )+(\r)", "\r\r",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         "(\t)( )+(\t)", "\t\t",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         "(\t)( )+(\r)", "\t\r",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         "(\r)( )+(\t)", "\r\t",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                // Remove redundant tabs
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         "(\r)(\t)+(\r)", "\r\r",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                // Remove multiple tabs following a line break with just one tab
                result = System.Text.RegularExpressions.Regex.Replace(result,
                         "(\r)(\t)+", "\r\t",
                         System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                // Initial replacement target string for line breaks
                string breaks = "\r\r\r";
                // Initial replacement target string for tabs
                string tabs = "\t\t\t\t\t";
                for (int index = 0; index < result.Length; index++)
                {
                    result = result.Replace(breaks, "\r\r");
                    result = result.Replace(tabs, "\t\t\t\t");
                    breaks = breaks + "\r";
                    tabs = tabs + "\t";
                }

                // That's it.
                return result;
            }
            catch
            {
                //MessageBox.Show("Error");
                return source;
            }
        }

        
        public ActionResult SearchEmailList(string SearchText)
        {
            UserCredential credential;
            var cleantSecretPath = HostingEnvironment.MapPath("~/Uploads/credentials.json");
            var rootPath = HostingEnvironment.MapPath("~/");

            if (rootPath != null)
            {
                var credentialPath = Path.Combine(rootPath, "Credentials");
                var directoryInfo = Directory.CreateDirectory(credentialPath);
            }

            using (var stream =
                new FileStream(cleantSecretPath, FileMode.Open, FileAccess.Read))
            {
                // The file token.json stores the user's access and refresh tokens, and is created
                // automatically when the authorization flow completes for the first time.
                string credPath = HostingEnvironment.MapPath("~/Uploads/");
                credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                    GoogleClientSecrets.Load(stream).Secrets,
                    Scopes,
                    "user",
                    CancellationToken.None,
                    new FileDataStore(credPath, true)).Result;
                ViewBag.Result1 = ("Credential file saved to: " + credPath);
            }
            var service = new GmailService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                //ApplicationName = ApplicationName,
            });

            List<Message> result = new List<Message>();
            UsersResource.MessagesResource.ListRequest request = service.Users.Messages.List("me");
            request.Q = SearchText;

            do
            {
                try
                {
                    ListMessagesResponse response = request.Execute();
                    result.AddRange(response.Messages);
                    request.PageToken = response.NextPageToken;
                }
                catch (Exception e)
                {
                    throw e;
                }
            } while (!String.IsNullOrEmpty(request.PageToken));

            List<BO.Recieved_Emails> emails = new List<BO.Recieved_Emails>();



            List<Message> list = new List<Message>();
            foreach (Message email in result)
            {
                var emailInfoReq = service.Users.Messages.Get("me", email.Id);
                var emailInfoResponse = emailInfoReq.Execute();

                if (emailInfoResponse != null)
                {
                    string from = "";
                    string date = "";
                    string subject = "";
                    string body = "";
                    var id = emailInfoResponse.Id;

                    //loop through the headers and get the fields we need...
                    foreach (var mParts in emailInfoResponse.Payload.Headers)
                    {
                        if (mParts.Name == "Date")
                        {
                            date = mParts.Value;
                            int index = date.IndexOf("+");
                            if (index > 0)
                                date = date.Substring(0, index);
                            int index1 = date.IndexOf("-");
                            if (index1 > 0)
                                date = date.Substring(0, index1);
                        }
                        else if (mParts.Name == "From")
                        {
                            from = mParts.Value;
                            int index = from.IndexOf("<");
                            if (index > 0)
                                from = from.Substring(0, index);
                        }
                        else if (mParts.Name == "Subject")
                        {
                            subject = mParts.Value;
                        }

                        //if (date != "" && from != "")
                        //{
                        //    if (emailInfoResponse.Payload.Parts == null && emailInfoResponse.Payload.Body != null)
                        //        body = DecodeBase64String(emailInfoResponse.Payload.Body.Data);
                        //    else
                        //        body = GetNestedBodyParts(emailInfoResponse.Payload.Parts, "");
                        //    //now you have the data you want....

                        //}
                    }


                    BO.Recieved_Emails eachData = new BO.Recieved_Emails();
                    eachData.Display = date;
                    eachData.FromName = from;
                    eachData.Subject = subject;
                    eachData.Body = body;
                    eachData.ID = id;
                    emails.Add(eachData);
                }
            }

            return PartialView(emails.ToList());
        }

        [HttpPost]
        public ActionResult SaveEMailAganistQuotation(BO.QuotationAganistEmail data)
        {
            data.AddedBy = Convert.ToInt16(Session["userid"]);
            data.ModifiedBy = Convert.ToInt16(Session["userid"]);
            string message = dashboardBussinesManager.SaveEMailAganistQuotation(data);
            return Json(message);
        }

        public ActionResult QuotationEmail(int ID)
        {
            List<BO.QuotationAganistEmail> List = new List<BO.QuotationAganistEmail>();
            List = dashboardBussinesManager.GetEMailListForQuotation(ID);
            UserCredential credential;
            var cleantSecretPath = HostingEnvironment.MapPath("~/Uploads/credentials.json");
            var rootPath = HostingEnvironment.MapPath("~/");

            if (rootPath != null)
            {
                var credentialPath = Path.Combine(rootPath, "Credentials");
                var directoryInfo = Directory.CreateDirectory(credentialPath);
            }

            using (var stream =
                new FileStream(cleantSecretPath, FileMode.Open, FileAccess.Read))
            {
                string credPath = HostingEnvironment.MapPath("~/Uploads/");
                credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                    GoogleClientSecrets.Load(stream).Secrets,
                    Scopes,
                    "user",
                    CancellationToken.None,
                    new FileDataStore(credPath, true)).Result;
                ViewBag.Result1 = ("Credential file saved to: " + credPath);
            }
            var service = new GmailService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
            });
            List<BO.Recieved_Emails> emails = new List<BO.Recieved_Emails>();

            foreach (BO.QuotationAganistEmail email in List)
            {
                var emailInfoReq = service.Users.Messages.Get("me", email.MessageID);
                var emailInfoResponse = emailInfoReq.Execute();

                if (emailInfoResponse != null)
                {
                    string from = "";
                    string date = "";
                    string subject = "";
                    //string body = "";
                    var id = emailInfoResponse.Id;

                    //loop through the headers and get the fields we need...
                    foreach (var mParts in emailInfoResponse.Payload.Headers)
                    {
                        if (mParts.Name == "Date")
                        {
                            date = mParts.Value;
                            int index = date.IndexOf("+");
                            if (index > 0)
                                date = date.Substring(0, index);
                            int index1 = date.IndexOf("-");
                            if (index1 > 0)
                                date = date.Substring(0, index1);
                        }
                        else if (mParts.Name == "From")
                        {
                            from = mParts.Value;
                            int index = from.IndexOf("<");
                            if (index > 0)
                                from = from.Substring(0, index);
                        }
                        else if (mParts.Name == "Subject")
                        {
                            subject = mParts.Value;
                        }
                    }


                    BO.Recieved_Emails eachData = new BO.Recieved_Emails();
                    eachData.Display = date;
                    eachData.FromName = from;
                    eachData.Subject = subject;
                    
                    eachData.ID = id;
                    emails.Add(eachData);
                }



            }
            return PartialView(emails.ToList());
        }


        ////////////////////////////////////////////////////////////////////////////////////////////////
        ///
        public PartialViewResult _MailCampignDetails()
        {
            MDBL.MasterDataProvider dataProvider = new MDBL.MasterDataProvider();
            List<BO.MailCampaignTemplate> template =dataProvider.GetMailTemplateSummary();
            ViewBag.Template = new SelectList(template, "AutoID", "TemplateName");
            ViewBag.List = JsonConvert.SerializeObject(template);
            return PartialView();
        }


        public JsonResult AjaxSheduleCampaign(BO.MailCampaign Campaign , List<BO.ContactPerson> Contact)
        {
            BO.ResponseMessage message = new BO.ResponseMessage();
            EM.EmailDataProvider dataProvider = new EM.EmailDataProvider();
            DataTable dt = new DataTable();
            dt.Columns.Add("ContactPersonID");
            dt.Columns.Add("Status");
            dt.TableName = "PT_EmailCampaign";
            foreach(BO.ContactPerson person in Contact)
            {
                DataRow row = dt.NewRow();
                row["ContactPersonID"] = person.ContactPersonID;
                row["Status"] = 1;
                dt.Rows.Add(row);
            }
            Campaign.AddedBy = Convert.ToInt32(Session["userid"]);
            message = dataProvider.AjaxSheduleCampaign(dt,Campaign);
            return Json(message);
        }


        //[HttpPost]
        public ActionResult SendEmailForCampaign(int recordID)
        {
            BO.MailCampaign campaign = new BO.MailCampaign();
            MDBL.MasterDataProvider dataProvider = new MDBL.MasterDataProvider();
            campaign = dataProvider.GetDataForCampaignRecord(recordID);
            try
            {
                using (MailMessage mail = new MailMessage(campaign.EmailID, campaign.To))
                {
                    mail.Subject = campaign.Subject;
                    mail.Body = campaign.Body;
                    foreach(BO.EmployeeAttachments att in campaign.Attachments)
                    {
                        Attachment attachment = new Attachment(att.FilePath);
                        mail.Attachments.Add(attachment);
                    }
                    mail.IsBodyHtml = true;
                    SmtpClient smtp = new SmtpClient();
                    smtp.Host = "smtp.gmail.com";
                    smtp.EnableSsl = true;
                    NetworkCredential networkCredential = new NetworkCredential(campaign.EmailID, campaign.CampaignPassword);
                    smtp.UseDefaultCredentials = true;
                    smtp.Credentials = networkCredential;
                    smtp.Port = 587;
                    smtp.Send(mail);

                    dataProvider.setStatusForRecord(recordID);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return Json("sent");
        }

        public ActionResult Pixel(string t)
        {
            MDBL.MasterDataProvider dataProvider = new MDBL.MasterDataProvider();
            dataProvider.setCountForRecord(t);
            return Json("");
        }



        public ActionResult CampaignSummary()
        {
            return View();
        }

        [HttpPost]
        public JsonResult AjaxGetCampaignSummary()
        {
            MDBL.MasterDataProvider dataProvider = new MDBL.MasterDataProvider();

            List<BO.MailCampaignTemplate> campaignTemplates = new List<BO.MailCampaignTemplate>();
            campaignTemplates = dataProvider.GetCampaignSummaryData();

            var jsonResult = Json(campaignTemplates, JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }


        [HttpPost]
        public PartialViewResult _CampaignDetails(int RecordID)
        {
            MDBL.MasterDataProvider dataProvider = new MDBL.MasterDataProvider();

            List<BO.CampaignDetails> campaignDetails = new List<BO.CampaignDetails>();
            campaignDetails = dataProvider.GetCampaignDetailsSummary(RecordID);
            return PartialView(campaignDetails.ToList());
        }

    } 

}